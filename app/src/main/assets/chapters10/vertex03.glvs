attribute float a_tData;

uniform vec4 u_StartEndData;
uniform vec4 u_ControlData;

uniform float u_Offset;

varying vec4 v_Color;

vec2 bezier_3order_mix(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in float t) {
    vec2 q0 = mix(p0, p1, t);
    vec2 q1 = mix(p1, p2, t);
    vec2 q2 = mix(p2, p3, t);

    vec2 r0 = mix(q0, q1, t);
    vec2 r1 = mix(q1, q2, t);

    return mix(r0, r1, t);
}

void main() {
    vec2 p0 = vec2(u_StartEndData.xy);
    vec2 p3 = vec2(u_StartEndData.zw);

    vec2 p1 = vec2(u_ControlData.xy);
    vec2 p2 = vec2(u_ControlData.zw);

    p0.y *= u_Offset;
    p1.y *= u_Offset;
    p2.y *= u_Offset;
    p3.y *= u_Offset;

    float t = a_tData;

    vec2 point;

    // 用于绘制三角形的时候起作用，类似于绘制扇形
    if (t < 0.0) {
        point = vec2(0.0, 0.0);
    } else {
        point = bezier_3order_mix(p0, p1, p2, p3, t);
    }
//        point = bezier_3order_mix(p0, p1, p2, p3, t);

    vec4 pos = vec4(point.xy, 0.0, 1.0);

    gl_PointSize = 4.0;
    gl_Position = pos;

    v_Color = pos;
}